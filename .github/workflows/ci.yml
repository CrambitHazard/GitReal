name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # ============================================================================
  # QUALITY CHECKS
  # ============================================================================
  
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      - name: Type check
        run: npm run type-check

  # ============================================================================
  # TESTING
  # ============================================================================

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # ============================================================================
  # BUILD
  # ============================================================================

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build:frontend

      - name: Build backend
        run: npm run build:backend

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            src/frontend/dist/
          retention-days: 7

  # ============================================================================
  # SECURITY
  # ============================================================================

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run dependency check
        run: npx audit-ci --moderate

  # ============================================================================
  # DOCKER BUILD (FUTURE)
  # ============================================================================

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub (Future)
        # TODO: Configure Docker Hub credentials
        # uses: docker/login-action@v3
        # with:
        #   username: ${{ secrets.DOCKER_USERNAME }}
        #   password: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "Docker login placeholder"

      - name: Build Docker image
        run: |
          docker build -t reallifegit:latest .
          docker tag reallifegit:latest reallifegit:${{ github.sha }}

      - name: Push Docker image (Future)
        # TODO: Push to registry when ready
        # run: |
        #   docker push reallifegit:latest
        #   docker push reallifegit:${{ github.sha }}
        run: echo "Docker push placeholder"

  # ============================================================================
  # DEPLOYMENT (FUTURE)
  # ============================================================================

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Deploy to staging
        # TODO: Configure deployment to staging environment
        run: echo "Staging deployment placeholder"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production
        # TODO: Configure deployment to production environment
        run: echo "Production deployment placeholder"

  # ============================================================================
  # NOTIFICATIONS
  # ============================================================================

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [lint, test, build, security]
    if: always()
    steps:
      - name: Notify on success
        if: ${{ success() }}
        run: echo "✅ All checks passed! Ready for deployment."

      - name: Notify on failure
        if: ${{ failure() }}
        run: echo "❌ Pipeline failed. Check the logs for details."

      # TODO: Configure Slack/Discord notifications
      # - name: Slack notification
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     channel: '#development'
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
